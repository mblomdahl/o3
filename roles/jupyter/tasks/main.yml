---

- name: ensure jupyter user exists
  user:
    name: jupyter
    comment: "Jupyter notebook user"
    shell: /bin/bash
  tags: jupyter

- name: ensure jupyter user has authorized_keys set
  authorized_key:
    user: jupyter
    key: "{{ lookup('file', 'public_keys/' + item + '_id_rsa.pub') }}"
  with_items: "{{ ['hadoop'] + jupyter_admins }}"
  tags: jupyter

- name: ensure better bash history for jupyter user
  blockinfile:
    dest: /home/jupyter/.bashrc
    mode: u=rw,g=r,o=r
    marker: "# {mark} ANSIBLE MANAGED BLOCK jupyter-history"
    block: |
      HISTFILESIZE=20000
      HISTSIZE=10000
      HISTTIMEFORMAT='%y-%m-%dT%T  '
  become: yes
  become_user: jupyter
  tags: jupyter

- name: ensure ~/notebooks and ~/.jupyter dir exists
  file:
    path: /home/jupyter/{{ item }}
    state: directory
  become: yes
  become_user: jupyter
  with_items:
    - notebooks
    - .jupyter
  tags: jupyter

- name: ensure o3 directory does not exist
  file:
    path: /home/jupyter/o3
    state: absent
  tags: jupyter

- name: ensure sample notebook is copied to the server
  copy:
    src: notebooks/gdp_per_country.ipynb
    dest: /home/jupyter/notebooks/gdp_per_country.ipynb
  become: yes
  become_user: jupyter
  tags: jupyter

- name: ensure latest environment is present on the server
  template:
    src: environment-linux.yml.j2
    dest: /home/jupyter/environment-linux.yml
  become: yes
  become_user: jupyter
  tags: jupyter

- name: ensure anaconda3 environment is set up
  include_role:
    name: anaconda3
  vars:
    anaconda3_user: jupyter
    anaconda3_environment_name: jupyter
    anaconda3_environment_file: /home/jupyter/environment-linux.yml
  tags: jupyter

- name: ensure jupyter config matches template
  template:
    src: jupyter_notebook_config.py.j2
    dest: /home/jupyter/.jupyter/jupyter_notebook_config.py
  become: yes
  become_user: jupyter
  notify:
    - restart jupyter
  tags: jupyter

- name: ensure jupyter service matches template
  template:
    src: jupyter.service.j2
    dest: /etc/systemd/system/jupyter.service
  register: add_jupyter_services
  notify:
    - restart jupyter
  tags: jupyter

- name: ensure traffic is allowed to jupyter port 8888 from whitelisted sources
  firewalld:
    rich_rule: 'rule family=ipv4 source address={{ item }} port port=8888 protocol=tcp accept'
    permanent: yes
    immediate: yes
    state: enabled
  with_items: "{{ src_addr_whitelist }}"
  when: ansible_distribution == 'CentOS'
  tags: jupyter

- name: ensure jupyter service is running and auto-starting
  systemd:
    name: jupyter
    state: started
    enabled: true
    daemon_reload: '{{ true if add_jupyter_services is changed else false }}'
  tags: jupyter

...
